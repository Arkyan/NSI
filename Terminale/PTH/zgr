# Définition des roues de Lorenz
ROTOR1 = "EKMFLGDQVZNTOWYHXUSPAIBRCJ"
ROTOR2 = "AJDKSIRUXBLHWTMCQGZNPYFVOE"
ROTOR3 = "BDFHJLCPRTXVZNYEIWGAKMUSQO"

def lorenz_decrypt(ciphertext, key_stream):
    plaintext = ""
    for i in range(len(ciphertext)):
        # Récupération de la lettre chiffrée
        encrypted_char = ciphertext[i]
        # Déchiffrement avec la clé de flux
        decrypted_char = chr((ord(encrypted_char) - ord(key_stream[i])) % 26 + ord('A'))
        plaintext += decrypted_char
    return plaintext

def generate_key_stream(key, length):
    key_stream = ""
    for _ in range(length):
        for rotor in key:
            key_stream += rotor[0]
            rotor = rotor[1:] + rotor[0]
    return key_stream

def main():
    ciphertext
    
    # Clé utilisée pour générer le flux de clé
    key = [ROTOR1, ROTOR2, ROTOR3]
    
    # Longueur du flux de clé
    key_length = len(ciphertext)
    
    # Générer le flux de clé
    key_stream = generate_key_stream(key, key_length)
    
    # Décrypter le message
    decrypted_message = lorenz_decrypt(ciphertext, key_stream)
    
    print("Message décodé :")
    print(decrypted_message)

if __name__ == "__main__":
    main()
